#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""  crypto.cipher.sbox_nonlin

    sbox non-linearity analysis using walsh functions
    
    Currently hardwired for AES and SMS4.

    Copyright (c) 2008 by Paul A. Lambert
"""

def sboxNonlinearity(sbox):
    """ Calcualte a measure of the nonlinearity of an sbox using Walsh Transform.
        Transform is calculated on 255 different 1 bit versions
        of the sbox that are formed by the binary inner product of
        the sbox with sequence 1 through 255.  This is all possible
        linear combinations of the 8 bits into a 1 bit valued sequence
    """
    n = log2n(len(sbox)) # sbox length must be power of 2
    nlv = (2**n-1)*[0] # vector of each nonlinearity calculation
                       # of inner product skipping zero
                       # this just initializes the vector of 255 results

    for c in range(len(nlv)):    # for each of the 255 ways to combine the 8 bits
        t = [ binaryInnerProduct(c+1,sbox[i]) for i in range(len(sbox)) ]
        nlv[c] = nonLinearity(t)
    minNonlinearity = min( [ abs(i) for i in nlv ] )
    maxNonlinearity = max( [ abs(i) for i in nlv ] )
    return minNonlinearity, maxNonlinearity

def walshTransform(t):
    n = log2n(len(t))  # n not used, but asserts if n not a power of 2
    wt = len(t)*[0]
    for w in range( len(t) ):
        for x in range( len(t) ):
            wt[w] = wt[w]+(-1)**(t[x] ^ binaryInnerProduct(w,x) )
    return wt

def binaryInnerProduct(a,b):
    """  """
    ip=0
    ab = a & b
    while ab > 0:
        ip=ip^(ab&1)   # either ^ or + works for walsh transform ...
        ab = ab>>1
    return ip

def nonLinearity(t):
    """ Non-linearity of a binary sequence
    """
    wt = walshTransform(t)
    nl = len(t)/2 - .5*max( [ abs(i) for i in wt ] )
    return nl
    
def log2n(l):
    """ Log2 of an integer only for numbers that are powers of 2 """
    x = l
    n = 0
    while x > 0:
        x=x>>1
        n=n+1
    n = n-1
    assert 2**n == l , "log2n(l) valid only for l=2**n"
    return n

if __name__ == "__main__":
    print " ... be patient, this will take a while ... "
    
    # Test data used to match journal results for walsh transform 
    # t = (1,1,0,0,1,1,0,0)
    # print walshTransform(t)
    # print nonLinearity(t)

    # AES sbox 
    aes_sbbytes = (0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,
           0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
           0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,
           0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
           0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,
           0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
           0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,
           0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
           0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,
           0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
           0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,
           0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
           0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,
           0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
           0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,
           0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
           0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,
           0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
           0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,
           0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
           0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,
           0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
           0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,
           0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
           0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,
           0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
           0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,
           0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
           0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,
           0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
           0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,
           0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16)
    print "AES non-linearity  (min, max) = ", sboxNonlinearity(aes_sbbytes)

    # sms4 sbox
    sms4_sbbytes = (0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,
           0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
           0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,
           0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
           0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,
           0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
           0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,
           0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
           0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,
           0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
           0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,
           0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
           0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,
           0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
           0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,
           0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
           0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,
           0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
           0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,
           0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
           0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,
           0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
           0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,
           0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
           0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,
           0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
           0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,
           0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
           0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,
           0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
           0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,
           0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48 )

    print "sms4 non-linearity (min, max) = ", sboxNonlinearity(sms4_sbbytes)

    # random sbox for comparison 
    from random import shuffle
    
    randomSbox = [ i for i in range(256) ]
    shuffle(randomSbox)
    print "random sbox        (min, max) = ", sboxNonlinearity( randomSbox )
    

